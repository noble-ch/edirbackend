from django.shortcuts import render, redirect,  get_object_or_404
from django.shortcuts import redirect
from rest_framework.generics import RetrieveAPIView
from rest_framework.viewsets import GenericViewSet
from rest_framework.permissions import IsAuthenticated
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework import viewsets, status, mixins, serializers
from drf_yasg import openapi
from drf_yasg.utils import swagger_auto_schema
from rest_framework.renderers import TemplateHTMLRenderer
from rest_framework.views import APIView
from rest_framework.throttling import AnonRateThrottle
from rest_framework import status
from rest_framework import mixins
from django.db.models import Q
from django.utils import timezone





from .permissions import IsCoordinatorOrEdirHead, IsEdirHeadOrAdmin
from .serializers import AttendanceSerializer, ContributionSerializer, EdirSerializer, EventReportSerializer, EventSerializer, ExpenseSerializer, MemberSerializer, MemberDetailSerializer,  TaskGroupSerializer, TaskSerializer, UserLoginSerializer
from .forms import EdirRequestForm
from .models import Attendance, Contribution, Edir, EventReport, Expense, Member,  Event, Task, TaskGroup  # Ensure Event is imported




class EdirRequestAPIView(APIView):
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'tenants/edir_request.html'

    @swagger_auto_schema(
        operation_description="Submit a request to create a new Edir",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'name': openapi.Schema(type=openapi.TYPE_STRING, description='Name of the Edir'),
                'description': openapi.Schema(type=openapi.TYPE_STRING, description='Description of the Edir'),
                'location': openapi.Schema(type=openapi.TYPE_STRING, description='Location of the Edir'),
            },
            required=['name', 'description', 'location'],  # Adjust based on your form
        ),
        responses={
            200: openapi.Response(
                description="Edir request submitted successfully",
                examples={
                    "text/html": "<html><body>Edir request success</body></html>"
                }
            )
        }
    )
    def post(self, request, *args, **kwargs):
        form = EdirRequestForm(request.data)
        if form.is_valid():
            form.save()
            return Response(template_name='tenants/edir_request_success.html')
        return Response({'form': form}, template_name='tenants/edir_request.html')

    def get(self, request, *args, **kwargs):
        form = EdirRequestForm()
        return Response({'form': form})




class UserLoginAPIView(APIView):
    def post(self, request, edir_slug=None):
        serializer = UserLoginSerializer(
            data=request.data,
            context={
                'request': request,
                'edir_slug': edir_slug
            }
        )
        
        if serializer.is_valid():
            response_data = serializer.validated_data
            status_code = status.HTTP_200_OK
            
            # Adjust response for pending/rejected members
            verification_status = response_data.get('verification_status')
            if verification_status in [
                'PENDING',
                'REJECTED'
            ]:
                status_code = status.HTTP_403_FORBIDDEN
            
            return Response(response_data, status=status_code)
        
        return Response(
            {
                'error': 'Login failed',
                'details': serializer.errors
            },
            status=status.HTTP_400_BAD_REQUEST
        )
        

class MemberRegistrationViewSet(viewsets.ViewSet):
    throttle_classes = [AnonRateThrottle]
    
    def create(self, request, edir_slug=None):
        try:
            edir = Edir.objects.get(slug=edir_slug, approved=True)
        except Edir.DoesNotExist:
            return Response(
                {"error": "Edir not found or not approved"}, 
                status=status.HTTP_404_NOT_FOUND
            )

        data = request.data.copy()
        data['edir'] = edir.id
        
        serializer = MemberSerializer(data=data, context={'request': request})
        if serializer.is_valid():
            member = serializer.save()
            
            # Send verification email
            self._send_verification_email(member)
            
            response_data = serializer.data
            response_data['id'] = member.id
            return Response(
                {"message": "Registration successful. Please check your email for verification."},
                status=status.HTTP_201_CREATED
            )
        return Response(
            {"errors": serializer.errors}, 
            status=status.HTTP_400_BAD_REQUEST,
            content_type="application/json"
        )

    def _send_verification_email(self, member):
        pass
    
     

class MemberViewSet(mixins.RetrieveModelMixin,
                   mixins.UpdateModelMixin,
                   mixins.DestroyModelMixin,
                   mixins.ListModelMixin,
                   viewsets.GenericViewSet):
    permission_classes = [IsAuthenticated, IsEdirHeadOrAdmin]
    queryset = Member.objects.all()
    
    def get_serializer_class(self):
        if self.action == 'retrieve':
            return MemberDetailSerializer
        return MemberSerializer
    def get_queryset(self):
        user = self.request.user
        queryset = Member.objects.all()
        
        status_filter = self.request.query_params.get('status', None)
        if status_filter:
            queryset = queryset.filter(status=status_filter)
            
        if user.is_superuser:
            return queryset
        
        try:
            member = Member.objects.get(user=user)
            if member.role != 'regular_member':
                return queryset.exclude(role='regular_member')
        except Member.DoesNotExist:
            return queryset.none()
        
        return queryset.filter(edir__head=user)
    
    @swagger_auto_schema(
        operation_description="Get details of a specific member",
        responses={200: MemberDetailSerializer}
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)
    
    @swagger_auto_schema(
        operation_description="Update a member",
        request_body=MemberSerializer,
        responses={200: MemberSerializer}
    )
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)
    
    @swagger_auto_schema(
        operation_description="Partial update of a member",
        request_body=MemberSerializer,
        responses={200: MemberSerializer}
    )
    def partial_update(self, request, *args, **kwargs):
        return super().partial_update(request, *args, **kwargs)
    
    @swagger_auto_schema(
        operation_description="Delete a member",
        responses={204: "No content"}
    )
    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)
    
    @swagger_auto_schema(
        operation_description="List all members",
        responses={200: MemberSerializer(many=True)}
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)
    

class EventViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = EventSerializer
    
    def get_queryset(self):
        user = self.request.user
        edir_slug = self.kwargs.get('edir_slug')
        
        if edir_slug:
            return Event.objects.filter(edir__slug=edir_slug)
        
        if user.is_superuser:
            return Event.objects.all()
        
        return Event.objects.filter(edir__members__user=user)
    
    def perform_create(self, serializer):
        edir_slug = self.kwargs.get('edir_slug')
        edir = get_object_or_404(Edir, slug=edir_slug)
        member = get_object_or_404(Member, user=self.request.user, edir=edir)
        serializer.save(edir=edir, created_by=member)
    
    @swagger_auto_schema(
        operation_description="Retrieve details of a specific event",
        responses={200: EventSerializer}
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)
    
    @swagger_auto_schema(
        operation_description="Update an event",
        request_body=EventSerializer,
        responses={200: EventSerializer}
    )
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)
    
    @swagger_auto_schema(
        operation_description="Partial update of an event",
        request_body=EventSerializer,
        responses={200: EventSerializer}
    )
    def partial_update(self, request, *args, **kwargs):
        return super().partial_update(request, *args, **kwargs)
    
    @swagger_auto_schema(
        operation_description="Delete an event",
        responses={204: "No content"}
    )
    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)

class AttendanceViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = AttendanceSerializer
    
    def get_queryset(self):
        user = self.request.user
        event_id = self.kwargs.get('event_id')
        
        if user.is_superuser:
            return Attendance.objects.all()
        
        return Attendance.objects.filter(
            Q(member__user=user) | 
            Q(event__edir__members__user=user)
        ).distinct()
    
    def perform_create(self, serializer):
        event_id = self.kwargs.get('event_id')
        event = get_object_or_404(Event, id=event_id)
        member = get_object_or_404(Member, user=self.request.user, edir=event.edir)
        serializer.save(event=event, member=member)

class ContributionViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = ContributionSerializer

    def get_queryset(self):
        user = self.request.user
        event_id = self.kwargs.get('event_id')

        base_queryset = Contribution.objects.all()

        if event_id:
            base_queryset = base_queryset.filter(event_id=event_id)
            
        if user.is_superuser:
            return base_queryset

        try:
            member = Member.objects.get(user=user) 
            edir = member.edir

            if edir.head == user:
                return base_queryset.filter(event__edir=edir)

            return base_queryset.filter(member=member)

        except Member.DoesNotExist:
             return Contribution.objects.none()


    def perform_create(self, serializer):
        event_id = self.kwargs.get('event_id')
        if not event_id:
             raise serializers.ValidationError("Event ID must be provided in the URL.")

        event = get_object_or_404(Event, id=event_id)
        member = get_object_or_404(Member, user=self.request.user, edir=event.edir)

        serializer.save(event=event, member=member)

    @action(detail=True, methods=['post'], permission_classes=[IsEdirHeadOrAdmin])
    def confirm(self, request, pk=None, **kwargs): 
        contribution = self.get_object()
        try:
            requesting_member = get_object_or_404(Member, user=request.user)
        except Member.DoesNotExist:
             return Response({"error": "Requesting user is not a registered member."}, status=status.HTTP_403_FORBIDDEN)

        if contribution.event.edir != requesting_member.edir:
            return Response(
                {"error": "You can only confirm contributions in your Edir"},
                status=status.HTTP_403_FORBIDDEN
            )

        contribution.confirmed_by = requesting_member
        contribution.confirmed_at = timezone.now()
        contribution.save()

        serializer = self.get_serializer(contribution)
        return Response(serializer.data, status=status.HTTP_200_OK)
    

class ExpenseViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = ExpenseSerializer

    def get_queryset(self):
        user = self.request.user
        event_id = self.kwargs.get('event_id')

        base_queryset = Expense.objects.all()

        if event_id:
            base_queryset = base_queryset.filter(event_id=event_id)

        if user.is_superuser:
            return base_queryset

        try:
            member = Member.objects.get(user=user)
            edir = member.edir

            if edir.head == user:
                return base_queryset.filter(event__edir=edir)

            return base_queryset.filter(spent_by=member)

        except Member.DoesNotExist:
            return Expense.objects.none()

    def perform_create(self, serializer):
        event_id = self.kwargs.get('event_id')
        if not event_id:
             raise serializers.ValidationError("Event ID must be provided in the URL.")

        event = get_object_or_404(Event, id=event_id)
        member = get_object_or_404(Member, user=self.request.user, edir=event.edir)

        serializer.save(event=event, spent_by=member)

    @action(detail=True, methods=['post'], permission_classes=[IsEdirHeadOrAdmin])
    def approve(self, request, pk=None, **kwargs):
        expense = self.get_object()
        try:
            requesting_member = get_object_or_404(Member, user=request.user)
        except Member.DoesNotExist:
             return Response({"error": "Requesting user is not a registered member."}, status=status.HTTP_403_FORBIDDEN)

        if expense.event.edir != requesting_member.edir:
            return Response(
                {"error": "You can only approve expenses in your Edir"},
                status=status.HTTP_403_FORBIDDEN
            )

        expense.approved_by = requesting_member
        expense.approved_at = timezone.now()
        expense.save()

        serializer = self.get_serializer(expense)
        return Response(serializer.data, status=status.HTTP_200_OK)
    

class TaskGroupViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated, IsCoordinatorOrEdirHead]
    serializer_class = TaskGroupSerializer

    def get_queryset(self):
        event_id = self.kwargs.get('event_id')
        return TaskGroup.objects.filter(event_id=event_id)

    def perform_create(self, serializer):
        event_id = self.kwargs.get('event_id')
        event = get_object_or_404(Event, id=event_id)
        member = get_object_or_404(Member, user=self.request.user, edir=event.edir)
        serializer.save(event=event, edir=event.edir, created_by=member)

class TaskViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated, IsCoordinatorOrEdirHead]
    serializer_class = TaskSerializer

    def get_queryset(self):
        task_group_id = self.kwargs.get('task_group_id')
        return Task.objects.filter(task_group_id=task_group_id)

    def perform_create(self, serializer):
        task_group_id = self.kwargs.get('task_group_id')
        task_group = get_object_or_404(TaskGroup, id=task_group_id)
        member = get_object_or_404(Member, user=self.request.user, edir=task_group.edir)
        serializer.save(task_group=task_group, assigned_by=member)

    @action(detail=True, methods=['post'])
    def complete(self, request, event_id=None, task_group_id=None, pk=None):
        task = self.get_object()
        task.status = 'completed'
        task.completed_at = timezone.now()
        task.save()
        return Response({'status': 'task completed'})

class EventReportViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated, IsCoordinatorOrEdirHead]
    serializer_class = EventReportSerializer

    def get_queryset(self):
        user = self.request.user
        event_id = self.kwargs.get('event_id')

        queryset = EventReport.objects.all()
        if event_id:
            queryset = queryset.filter(event_id=event_id)
        
        if user.is_superuser:
            return queryset
        
        # For coordinators, show only reports from their edir
        return queryset.filter(event__edir__members__user=user)

    def perform_create(self, serializer):
        event_id = self.kwargs.get('event_id')
        event = get_object_or_404(Event, id=event_id)
        member = get_object_or_404(Member, user=self.request.user, edir=event.edir)
        
        # Generate attendance summary
        attendances = event.attendances.all()
        attendance_summary = {
            'total_members': event.edir.members.count(),
            'attending': attendances.filter(status='attending').count(),
            'not_attending': attendances.filter(status='not_attending').count(),
            'maybe': attendances.filter(status='maybe').count(),
            'no_response': event.edir.members.count() - attendances.count()
        }
        
        # Generate financial summary
        contributions = event.contributions.all()
        expenses = event.expenses.all()
        financial_summary = {
            'total_contributions': sum(c.amount for c in contributions),
            'total_expenses': sum(e.amount for e in expenses),
            'balance': sum(c.amount for c in contributions) - sum(e.amount for e in expenses),
            'contribution_count': contributions.count(),
            'expense_count': expenses.count()
        }
        
        serializer.save(
            event=event,
            prepared_by=member,
            attendance_summary=attendance_summary,
            financial_summary=financial_summary
        )

    @action(detail=True, methods=['get'])
    def generate_pdf(self, request, event_id=None, pk=None):
        # This would generate a PDF version of the report
        # Implementation would depend on your PDF generation library
        report = self.get_object()
        # pdf = generate_pdf_function(report)
        # return FileResponse(pdf, filename=f"report-{report.event.title}.pdf")
        return Response({'message': 'PDF generation endpoint'})